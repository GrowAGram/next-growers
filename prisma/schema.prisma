generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum NotificationEvent {
  REPORT_CREATED
  POST_CREATED
  LIKE_CREATED
  COMMENT_CREATED
  COMMENT_ANSWERED
  FOLLOWED_USER
}

enum CannabisStraintype {
  Indica
  Sativa
  Hybrid
}

enum GrowStage {
  PREPARATION_STAGE
  GERMINANTION_STAGE
  SEEDLING_STAGE
  VEGETATIVE_STAGE
  FLOWERING_STAGE
  HARVEST_STAGE
  CURING_STAGE
}

model Notification {
  id          String            @id @default(cuid())
  recipient   User              @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  event       NotificationEvent
  readAt      DateTime?
  like        Like?             @relation(fields: [likeId], references: [id], onDelete: Cascade)
  likeId      String?
  comment     Comment?          @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String?
  post        Post?             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  report      Report?           @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId    String?
  follow      Follows?          @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model User {
  id              String         @id @default(cuid())
  name            String?        @unique
  password        String?
  image           String?
  imageId         String?
  role            Role           @default(USER)
  email           String?        @unique
  emailVerified   DateTime?
  accounts        Account[] // One User has many Accounts
  sessions        Session[] // One User has many Sessions
  reports         Report[] // One User has many Reports
  posts           Post[] // One User has many Posts
  comments        Comment[] // One User has many Comments
  likes           Like[]
  cloudImages     Image[]
  growerProfile   GrowerProfile? @relation(fields: [growerProfileId], references: [id])
  growerProfileId String?
  Notification    Notification[]
  followers       Follows[]      @relation("following")
  following       Follows[]      @relation("follower")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model GrowerProfile {
  id        String       @id @default(cuid())
  user      User[]
  bio       String?
  location  String?
  headerImg Image?       @relation(fields: [imageId], references: [id])
  links     SocialLink[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  imageId   String?
}

model SocialLink {
  id              String        @id @default(cuid())
  title           String?
  url             String
  growerProfile   GrowerProfile @relation(fields: [growerProfileId], references: [id], onDelete: Cascade)
  growerProfileId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Follows {
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  // @@id([followerId, followingId])
  Notification Notification[]
}

model CannabisStrain {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  effects     String[]
  flavors     String[]
  type        CannabisStraintype
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  reports     Report[] // A Strain grows in many Report
}

model Image {
  id            String          @id @default(cuid())
  publicId      String
  cloudUrl      String
  report        Report?         @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId      String?         @unique // Only one Image can be the main header image of a report
  post          Post?           @relation(fields: [postId], references: [id])
  postId        String?
  postOrder     Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       String
  GrowerProfile GrowerProfile[]
}

enum Environment {
  INDOOR
  OUTDOOR
}

model SeedfinderStrain {
  id                  String   @id @default(cuid())
  strainId            String // strainInfosFromSeedfinder.id
  name                String // strainInfosFromSeedfinder.name
  picture_url         String // strainInfosFromSeedfinder.brinfo.pic
  type                String //strainInfosFromSeedfinder.brinfo.type
  cbd                 String // strainInfosFromSeedfinder.brinfo.cbd
  description         String // strainInfosFromSeedfinder.brinfo.descr
  flowering_days      Int // strainInfosFromSeedfinder.brinfo.flowering.days
  flowering_info      String // strainInfosFromSeedfinder.brinfo.flowering.info
  flowering_automatic Boolean // strainInfosFromSeedfinder.brinfo.flowering.auto
  seedfinder_ext_url  String // strainInfosFromSeedfinder.links.info
  breederId           String // strainInfosFromSeedfinder.brinfo.id
  breeder_name        String // strainInfosFromSeedfinder.brinfo.name
  breeder_logo_url    String // selectedBreeder.logo
  breeder_description String // strainInfosFromSeedfinder.brinfo.description
  breeder_website_url String // strainInfosFromSeedfinder.brinfo.link
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Plant               Plant[]

  @@unique(fields: [strainId, breederId])
  @@index([strainId, breederId])
}

model Plant {
  id                 String           @id @default(cuid())
  report             Report           @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportId           String
  seedfinderStrain   SeedfinderStrain @relation(fields: [seedfinderStrainId], references: [id], onDelete: Cascade, onUpdate: Cascade) // A Report may have many Strains
  seedfinderStrainId String
  plantName          String           @default("")
}

model Report {
  id           String           @id @default(cuid())
  author       User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String // A Report has one Author
  title        String
  image        Image?
  description  String
  environment  Environment?
  plants       Plant[]
  posts        Post[] // A Report may have many Posts
  likes        Like[] // A Report may have many Likes
  contests     Contest[] // A Report may participate in many Contests
  products     Product[] // A Report may have many Products
  strains      CannabisStrain[] // A Report may have many CannabisStrains
  Notification Notification[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([authorId], name: "authorId_idx")
}

model Post {
  id               String         @id @default(cuid())
  isDeleted        Boolean        @default(false)
  report           Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId         String // A Post has one Report
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String // A Post has one Author
  date             DateTime
  growStage        GrowStage      @default(SEEDLING_STAGE)
  lightHoursPerDay Int?
  LightWatts       LightWatts?
  title            String
  content          String
  likes            Like[] // A Post has many Likes
  images           Image[] // A Post has many Images
  comments         Comment[] // A Post has many Comments
  Notification     Notification[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([reportId, date])
}

model LightWatts {
  id   String @id @default(cuid())
  watt Float // Represents the wattage value

  // Optional one-to-one relation to Post
  post   Post?   @relation(fields: [postId], references: [id])
  postId String? // A LightWatts may be associated with one Post

  @@unique([postId])
}

model Like {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  report       Report?        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     String?
  post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String?
  comment      Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    String?
  Notification Notification[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([userId, commentId])
  @@unique([userId, postId])
  @@unique([userId, reportId])
}

model Product {
  id          String   @id @default(cuid())
  type        TypeOf
  name        String
  description String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String // One Company has many Products
  reports     Report[] // many-to-many relationship with Report
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TypeOf {
  SEED
  NUTRIENT
  LIGHT
  TENT
}

model Comment {
  id      String @id @default(cuid())
  content String @db.VarChar(10000)

  responses      Comment[] @relation("CommentAnswers")
  isResponseTo   Comment?  @relation("CommentAnswers", fields: [isResponseToId], references: [id])
  isResponseToId String?

  author   User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String // One User has many Comments
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String? // One Post has many Comments

  Notification Notification[]
  likes        Like[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Company {
  id        String    @id @default(cuid())
  name      String
  contests  Contest[] // One Company has many Contests 
  products  Product[] // One Company has many Products
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Contest {
  id        String   @id @default(cuid())
  title     String
  content   String
  reports   Report[]
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text // needed if using the old Twitter OAuth 1.0 provider.
  oauth_token_secret String? @db.Text // needed if using the old Twitter OAuth 1.0 provider.
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  userId    String // One User has many Accounts
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId    String // One User has many Sessions
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
